keycloak:
  auth.url: ${auth.url:http://localhost:8080}
  client.id: ${auth.clientId:camunda-identity-service}
  client.secret: ${auth.clientSecret:secret}
  realm: ${auth.realm:elf}
  registration.id: keycloak

spring:
  jersey:
    application-path: /engine-rest
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:test}
  datasource:
    driver-class-name: ${database.driver-class-name:org.h2.Driver}
    type: com.zaxxer.hikari.HikariDataSource
    password: ${database.password:sa}
    username: ${database.username:}
    url: ${database.url:jdbc:h2:mem:workflow-service;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false}
    hikari:
      maximum-pool-size: 30
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSqlLimit: 2048
        prepStmtCacheSize: 250
      pool-name: workflow-service
      auto-commit: false
    name: workflow-service
  security:
    oauth2:
      client:
        registration:
          keycloak:
            provider: keycloak
            client-name: Keycloak SSO
            scope: openid, profile, email
            client-id: ${keycloak.client.id}
            client-secret: ${keycloak.client.secret}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
        provider:
          keycloak:
            authorization-uri: ${keycloak.auth.url}/auth/realms/${keycloak.realm}/protocol/openid-connect/auth
            token-uri: ${keycloak.auth.url}/auth/realms/${keycloak.realm}/protocol/openid-connect/token
            user-info-uri: ${keycloak.auth.url}/auth/realms/${keycloak.realm}/protocol/openid-connect/userinfo
            jwk-set-uri: ${keycloak.auth.url}/auth/realms/${keycloak.realm}/protocol/openid-connect/certs
            user-name-attribute: 'email'
      resourceserver:
        jwt:
          issuer-uri: ${keycloak.auth.url}/auth/realms/${keycloak.realm}
  session:
    store-type: redis
    redis:
      namespace: spring:session:${spring.application.name}
      flush-mode: immediate
  redis:
    host: ${redis.host:localhost}
    port: ${redis.port:6379}
    password: ${redis.token:mypass}
    ssl: ${redis.ssl:false}

camunda:
  bpm:
    authorization:
      enabled: true
    webapp:
      application-path:

server:
  servlet.context-path: /camunda
  forward-headers-strategy: native
  tomcat:
    remote-ip-header: x-forwarded-for
    protocol-header: x-forwarded-proto
  ssl:
    enabled: ${ssl.enabled:false}
    key-alias: cert
    key-store: /etc/keystore/keystore.p12
    key-store-password: changeit
    key-password: changeit
    key-store-type: PKCS12
    trust-store: ${javax.net.ssl.trustStore:/etc/keystore/cacerts}
    trust-store-password: ${javax.net.ssl.trustStorePassword:changeit}
    trust-store-type: ${javax.net.ssl.trustStoreType:PKCS12}

aws:
  region: ${AWS_REGION:eu-west-2}
  bucket-name: ${aws.s3.formData:}
  sns-region: ${aws.sns.region:eu-west-1}
  credentials:
    access-key: ${AWS_ACCESS_KEY:}
    secret-Key: ${AWS_SECRET_KEY:}

plugin.identity.keycloak:
  keycloakIssuerUrl: ${keycloak.auth.url}/auth/realms/${keycloak.realm}
  keycloakAdminUrl: ${keycloak.auth.url}/auth/admin/realms/${keycloak.realm}
  clientId: ${keycloak.client.id}
  clientSecret: ${keycloak.client.secret}
  useEmailAsCamundaUserId: true
  useUsernameAsCamundaUserId: false
  useGroupPathAsCamundaGroupId: true
  administratorGroupName: ${camunda.admin.group:camunda-admin}

management:
  endpoints:
    web:
      exposure:
        include: "health, info, prometheus, metrics,loggers"
